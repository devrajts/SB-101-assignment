
Implement the following functional interfaces with some basic examples using Lambda
expression.
Predicate
Supplier
Consumer
Function

1) Predicate : A Predicate interface represents a boolean-valued-function of an argument. This is mainly used to filter
data from a java Stream. The filter method of a stream accepts a predicate to filter the data and return a new stream
satisfying the predicate.A predicate has a test() method which accepts an argument and returns a boolean value.


public class Main {
    public static void main(String[] args) {
    Predicate<Integer> p = i -> i > 0;
    System.out.println(p.test(10));//true
    System.out.println(p.test(-10));//false
    }
}

2) Supplier : A Supplier is a simple interface which indicates that this implementation is a supplier of results. This
interface, however, does not enforce any restrictions that supplier implementation needs to return a different result on
each invocation.

The supplier has only one method get() and does not have any other default and static methods.

public class Main {
    public static void main(String[] args) {
    Supplier<String> s = () -> "This is from Lambda Expression";
    System.out.println(s.get());
    Supplier<Student> s2 = () -> new Student(10,"Ram",850);
    System.out.println(s2.get().getName());
    }
}

3)Consumer : A Consumer is a functional interface that accepts a single input and returns no output. In laymanâ€™s
language, as the name suggests the implementation of this interface consumes the input supplied to it.

public class Main {
    public static void main(String[] args) {
    Consumer<Student> c = s -> {
       System.out.println("Roll is "+s.getRoll());
       System.out.println("Name is "+s.getName());
       System.out.println("Marks is "+s.getMarks());
       };
    c.accept(new Student(10,"Amit",850));
    }
}

4)Function : A Function interface is more of a generic one that takes one argument and produces a result. This has a
Single Abstract Method (SAM) apply which accepts an argument of a type T and produces a result of type R. One of the
common use cases of this interface is Stream.map method.

public class Main {
    public static void main(String[] args) {
    Function<Integer,String> f = i -> "This is a numner "+i;
    System.out.println(f.apply(10));
    Function<String,Integer> f2 = s -> Integer.parseInt(s);
    System.out.println(f2.apply("200")+500);
    Function<String,Integer> f3 = Integer::parseInt;
    System.out.println(f3.apply("400")+200);
    }
}